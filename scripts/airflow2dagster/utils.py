import os
import subprocess
import tempfile
from pathlib import Path

import dspy
from chromadb.utils.embedding_functions import OpenAIEmbeddingFunction
from dspy.retrieve.chromadb_rm import ChromadbRM


def configure_dspy() -> None:
    turbo = dspy.OpenAI(model="gpt-4-turbo-2024-04-09", max_tokens=2048)

    embedding_function = OpenAIEmbeddingFunction(api_key=os.getenv("OPENAI_API_KEY"))
    retriever_model = ChromadbRM(
        collection_name="langchain",
        persist_directory="chroma.db",
        embedding_function=embedding_function,
    )

    dspy.settings.configure(lm=turbo, rm=retriever_model)


def extract_code_block_from_markdown(markdown_string: str) -> str:
    """Assumes that there is only one Markdown codeblock."""

    if "```" not in markdown_string:
        return markdown_string
    return markdown_string.split("```")[1].removeprefix("python")


def format_code(code: str) -> str:
    """Formats the code using Ruff."""

    with tempfile.NamedTemporaryFile() as fp:
        Path(fp.name).write_text(code)

        # Run Ruff via the CLI
        subprocess.run(  # Remove unused imports
            ["ruff", "check", "--fix", "--extend-select=I", fp.name],
            capture_output=True,
            text=True,
            check=True,
        )
        subprocess.run(
            ["ruff", "format", fp.name], capture_output=True, text=True, check=True
        )

        formatted_code = Path(fp.name).read_text()

    return formatted_code


def combine_code_snippets(
    snippets: list[str], placeholder_module_name: str = "dagster_code"
) -> str:
    """
    Combines multiple code snippets into one.

    Some snippets make an assumption to import objects from the `placeholder_module`.
    That import statement is removed from the final code.
    """
    import_statements = ""
    output = ""
    for snippet in snippets:
        for line in snippet.split("\n"):
            # Filter out unneeded lines
            if placeholder_module_name in line:
                continue
            # Remove superfluos top-level comments that are often generated by the LLM
            # Comments include a fictitious file name,
            # or comments that do not make sense in the final, combined code
            if line.startswith("#"):
                continue

            # Collect import statements separately, as Ruff is unable to lint and fix a file
            # when import statements are not at the top
            if "import " in line:
                import_statements += line.strip() + "\n"
            else:
                output += line + "\n"
    return import_statements + "\n\n" + output
